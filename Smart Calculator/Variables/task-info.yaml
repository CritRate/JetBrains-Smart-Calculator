type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"n = 3\nm=4\na =   5\nb = a\nn\nm\na\nb\ncount = 10\ncount\n/exit": "3\n4\n5\n5\n10\nBye!",
                     "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit": "2\n-5\n11\nBye!",
                     "a = 3\nb = 4\nc = 5\na + b - c\nb - c + 4 - a\na = 800\na + b + c\n/exit": "2\n0\n809\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!",
                     "q\nr\nq = 10\nr = 20\nq\nr\nR\n/exit": "Unknown variable\nUnknown variable\n10\n20\nUnknown variable\nBye!",
                     "a1 = 8\nn = a2a\na = 7 = 8\nnum = 10\n/exit": "Invalid identifier\nInvalid assignment\nInvalid assignment\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    import string


    def is_digit(n):
        try:
            int(n)
            return True
        except ValueError:
            return False


    def convert_to_calc(seq):
        return [int(s) if is_digit(s) else s.strip() for s in seq]


    def check_for_valid_exp(array):
        d_count = 0
        o_count = 0
        for n in array:
            if is_digit(n):
                d_count += 1
            else:
                o_count += 1

        return o_count == d_count - 1


    while True:
        i = input()
        if len(i) == 0:
            continue
        if i == '/exit':
            print('Bye!')
            break
        if i == '/help':
            print('The calculator works with + and -')
            continue
        if i.startswith('/'):
            print('Unknown command')
            continue
        s = i.split()
        num = convert_to_calc(s)
        if not check_for_valid_exp(num):
            print('Invalid expression')
            continue
        if len(i) == 0:
            continue
        elif len(i) == 1:
            print(i[0])
        else:
            result = 0
            operation = None
            for i, value in enumerate(num):
                if i == 0:
                    result = value
                    continue
                if i % 2 == 1:
                    if '-' in value:
                        operation = '+' if len(value) % 2 == 0 else '-'
                    else:
                        operation = '+'
                if i % 2 == 0:
                    if operation == '-':
                        result -= value
                    else:
                        result += value
                    operation = None
            print(result)
  learner_created: true
- name: calculator/calculator2.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/414/implement
status: Solved
record: 6
