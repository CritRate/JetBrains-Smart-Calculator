type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n1 +++ 2 * 3 -- 4\n/exit": "2\n-5\n11\n11\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit": "121\nBye!",
                     "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit": "48\nInvalid expression\nInvalid expression\nBye!",
                     "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit": "53\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    import string


    def is_digit(s):
        try:
            int(s)
            return True
        except ValueError:
            return False


    def is_variable(s):
        validate = [True if x in string.ascii_letters else False for x in s]
        if False in validate:
            return False
        return True


    def is_valid(s):
        return is_digit(s) or is_variable(s)


    class Calculator:

        def __init__(self):
            self.variables = {}
            self.VALID_OPERANDS = ['+', '-']
            self.exp = None

        def calculate(self):
            result = 0
            operator = None
            val = None

            for index, value in enumerate(self.exp):

                if is_variable(value):
                    val = self.variables.get(value, 'u')
                    if val == 'u':
                        print('Unknown variable')
                        return
                if is_digit(value):
                    val = int(value)

                if index == 0:
                    result = val
                elif index % 2 == 1:
                    operator = value
                else:
                    if operator == '+':
                        result += val
                    elif operator == '-':
                        result -= val
            print(result)

        def assign(self):
            if len(self.exp) > 3:
                print('Invalid assignment')
            if is_variable(self.exp[0]):
                if is_valid(self.exp[1]):
                    # reassigning variable to another one
                    if self.exp[1] in self.variables:
                        self.variables[self.exp[0]] = self.variables[self.exp[1]]
                    # creating new variable
                    else:
                        self.variables[self.exp[0]] = int(self.exp[1])
                else:
                    print('Invalid assignment')
            else:
                print('Invalid identifier')

        def print_variable(self):
            print(self.variables.get(self.exp[0], 'Unknown variable'))

        def execute(self, exp):
            self.sanitize(exp)

            operation = self.evaluate()

            if operation == 'ASSIGMENT':
                self.assign()
            if operation == 'CALCULATE':
                self.calculate()
            if operation == 'PRINTING':
                self.print_variable()

        def evaluate(self):
            if '=' in self.exp:
                return 'ASSIGMENT'
            elif len(self.exp) == 1:
                return 'PRINTING'
            else:
                return 'CALCULATE'

        def sanitize(self, exp):
            # 'n=5', 'n= 5', 'n =5' -> ['n', '5', '=]
            if '=' in exp:
                self.exp = [s.strip() for s in exp.split('=')]
                self.exp.append('=')
            else:
                exp = exp.split()
                for index, value in enumerate(exp):
                    if '-' in value:
                        exp[index] = '-' if value.count('-') % 2 == 1 else '+'
                    if '+' in value:
                        exp[index] = '+'
                self.exp = exp


    if __name__ == '__main__':
        calc = Calculator()

        while True:
            i = input()

            if len(i) == 0:
                continue
            if i == '/help':
                print('Smart calculator - /exit to quit')
                continue
            if i == '/exit':
                print('Bye!')
                break
            if i.startswith('/'):
                print('Unknown command')
                continue

            calc.execute(i)
  learner_created: true
- name: calculator/calculator2.py
  visible: true
  text: |+
    import string

    VALID_OPERANDS = ['+', '-']

    variables = dict()


    def is_digit(s):
        try:
            int(s)
            return True
        except ValueError:
            return False


    def is_variable(s):
        validate = [True if x in string.ascii_letters else False for x in s]
        if False in validate:
            return False
        return True


    def is_valid(s):
        return is_digit(s) or is_variable(s)


    def is_valid_assigment(expression):
        count = 0
        for e in expression:
            if e == '=':
                count += 1
        if count > 1:
            return False
        return True


    def is_valid_expression(expression):
        pass



    def print_variable(variable):
        if variable[0] in variables:
            print(variables[variable[0]])
        else:
            print('Unknown variable')


    def evaluate(expression):
        if '=' in expression or '=' in expression[0]:
            return 'ASSIGMENT'
        elif len(expression) == 1:
            return 'PRINTING'


    def assigment(expression):
        if len(expression) == 1:
            expression = list(expression)
        if is_variable(expression[0]):
            if is_valid(expression[2]):
                # reassigning variable to another one
                if expression[2] in variables:
                    variables[expression[0]] = variables[expression[2]]
                # creating new variable
                else:
                    variables[expression[0]] = int(expression[2])
            else:
                print('Invalid assigment')
        else:
            print('Invalid identifier')


    def calculate(expression):
        pass


    while True:
        i = input()
        if i == '/help':
            print('Smart calculator')
            continue
        if i == '/exit':
            print('Bye!')
            break
        if i.startswith('/'):
            print('Invalid command')
            continue
        exp = i.split()
        case = evaluate(exp)
        if case == 'ASSIGMENT':
            if is_valid_assigment(exp):
                assigment(exp)
            else:
                print('Invalid assigment')
        if case == 'CALCULATE':
            pass
        if case == 'PRINTING':
            print_variable(exp)

        print('vars ' + str(variables))


  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Solved
record: -1
